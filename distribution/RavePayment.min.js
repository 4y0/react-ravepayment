'use strict';

Object.defineProperty(exports, "__esModule", {
		value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RavePayment = function (_Component) {
		_inherits(RavePayment, _Component);

		function RavePayment(props) {
				_classCallCheck(this, RavePayment);

				var _this = _possibleConstructorReturn(this, (RavePayment.__proto__ || Object.getPrototypeOf(RavePayment)).call(this, props));

				_this.payWithRave = function () {
						window.getpaidSetup({
								customer_email: _this.props.email,
								amount: _this.props.amount,
								txref: _this.props.reference,
								PBFPubKey: _this.props.ravePubKey,
								onclose: function onclose() {
										return _this.props.close();
								},
								callback: function callback(response) {
										return _this.props.callback(response);
								},
								meta: _this.state.metadata,
								currency: _this.state.currency,
								country: _this.state.country,
								customer_firstname: _this.state.customer_firstname,
								customer_lastname: _this.state.customer_lastname,
								custom_title: _this.state.custom_title,
								custom_description: _this.state.custom_description,
								custom_logo: _this.state.custom_logo
						});
				};

				_this.state = {
						text: _this.props.text || 'Make Payment',
						class: _this.props.class || '',
						metadata: _this.props.metadata || [{}],
						currency: _this.props.currency || 'NGN',
						country: _this.props.country || 'NG',
						customer_firstname: _this.props.customer_firstname || '',
						customer_lastname: _this.props.customer_lastname || '',
						custom_title: _this.props.custom_title || '',
						custom_description: _this.props.custom_description || '',
						custom_logo: _this.props.custom_logo || ''
				};
				return _this;
		}

		_createClass(RavePayment, [{
				key: 'render',
				value: function render() {
						return _react2.default.createElement(
								'span',
								null,
								_react2.default.createElement(
										'button',
										{ className: this.state.class, onClick: this.payWithRave },
										this.state.text
								)
						);
				}
		}]);

		return RavePayment;
}(_react.Component);

exports.default = RavePayment;


RavePayment.propTypes = {
		text: _propTypes2.default.string,
		class: _propTypes2.default.string,
		metadata: _propTypes2.default.array,
		currency: _propTypes2.default.string,
		country: _propTypes2.default.string,
		customer_firstname: _propTypes2.default.string,
		customer_lastname: _propTypes2.default.string,
		custom_title: _propTypes2.default.string,
		custom_description: _propTypes2.default.string,
		custom_logo: _propTypes2.default.string,
		reference: _propTypes2.default.string.isRequired,
		email: _propTypes2.default.string.isRequired,
		amount: _propTypes2.default.number.isRequired, //in Naira
		ravePubKey: _propTypes2.default.string.isRequired,
		callback: _propTypes2.default.func.isRequired,
		close: _propTypes2.default.func.isRequired
};

//# sourceMappingURL=RavePayment.min.js.map